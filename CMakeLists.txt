cmake_minimum_required(VERSION 3.5)
project (trading_ifc)
set (CMAKE_CXX_STANDARD 20)
if (MSVC)
	add_compile_options(/W4 /EHsc /DNOMINMAX    )
	set(STANDARD_LIBRARIES "")
else()
	add_compile_options(-Wall -Wextra -Wpedantic)
	set(STANDARD_LIBRARIES "pthread")
endif()
add_compile_options(-Wall -Wno-noexcept-type)
find_package(Git)
if(GIT_EXECUTABLE)
	execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
endif()

# Find LevelDB using pkg-config
find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBSSL REQUIRED openssl)
pkg_check_modules(LIBWEBSOCKETS REQUIRED libwebsockets)


find_library(LEVELDB_LIBRARIES leveldb)
if(NOT LEVELDB_LIBRARIES)
  message(FATAL_ERROR "libleveldb missing (libleveldb-dev)?")
endif()


set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/)
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
	set(CMAKE_INSTALL_PREFIX "/usr/local" CACHE PATH "Default path to install" FORCE)
endif()
include_directories(BEFORE ${CMAKE_BINARY_DIR}/src)
include_directories(BEFORE ${CMAKE_BINARY_DIR}/src/libs/yaml/include)
include(library.cmake)
include(src/libs/json20/library.cmake)
include(src/libs/coroserver/library.cmake)
include(src/libs/libcoro/library.cmake)
enable_testing()
add_subdirectory("src/common")
add_subdirectory("src/tests")
add_subdirectory("src/example")
add_subdirectory("src/simulator")
add_subdirectory("src/exchanges/binance")
add_subdirectory("version")
